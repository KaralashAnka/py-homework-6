
class Student:

    def __init__(self, name, surname, gender):
        self.name = name
        self.surname = surname
        self.gender = gender
        self.finished_courses = []
        self.courses_in_progress = []
        self.grades = {}


    def rate_lecture(self, lecturer, course, grade):
        if not isinstance(lecturer, Lecturer):
            return "Ошибка"
        if course not in self.courses_in_progress:
            return "Ошибка"
        if course not in lecturer.courses_attached:
            return "Ошибка"
        if course not in lecturer.grades:
            lecturer.grades[course] = []
        lecturer.grades[course].append(grade)
        return None

    def average_grade(self):
        if not self.grades:
            return 0
        all_grades = []
        for course_grades in self.grades.values():
            all_grades.extend(course_grades)
        return sum(all_grades) / len(all_grades) if all_grades else 0


    def __str__(self):
        avg_grade = self.average_grade()
        courses_in_progress = ', '.join(self.courses_in_progress)
        finished_courses = ', '.join(self.finished_courses)
        return (f"Имя: {self.name}\n"
                f"Фамилия: {self.surname}\n"
                f"Средняя оценка за домашние задания: {avg_grade:.1f}\n"
                f"Курсы в процессе изучения: {courses_in_progress}\n"
                f"Завершенные курсы: {finished_courses}")

    def __lt__(self, other):
        if not isinstance(other, Student):
            return NotImplemented
        return self.average_grade() < other.average_grade()

    def __le__(self, other):
        if not isinstance(other, Student):
            return NotImplemented
        return self.average_grade() <= other.average_grade()

    def __eq__(self, other):
        if not isinstance(other, Student):
            return NotImplemented
        return self.average_grade() == other.average_grade()

    def __gt__(self, other):
        if not isinstance(other, Student):
            return NotImplemented
        return self.average_grade() > other.average_grade()

    def __ge__(self, other):
        if not isinstance(other, Student):
            return NotImplemented
        return self.average_grade() >= other.average_grade()


class Mentor:

    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []


class Lecturer(Mentor):

    def __init__(self, name, surname):
        super().__init__(name, surname)
        self.grades = {}

    def average_grade(self):
        if not self.grades:
            return 0
        all_grades = []
        for course_grades in self.grades.values():
            all_grades.extend(course_grades)
        return sum(all_grades) / len(all_grades) if all_grades else 0

    def __str__(self):
        avg_grade = self.average_grade()
        return (f"Имя: {self.name}\n"
                f"Фамилия: {self.surname}\n"
                f"Средняя оценка за лекции: {avg_grade:.1f}")

    def __lt__(self, other):
        if not isinstance(other, Lecturer):
            return NotImplemented
        return self.average_grade() < other.average_grade()

    def __le__(self, other):
        if not isinstance(other, Lecturer):
            return NotImplemented
        return self.average_grade() <= other.average_grade()

    def __eq__(self, other):
        if not isinstance(other, Lecturer):
            return NotImplemented
        return self.average_grade() == other.average_grade()

    def __gt__(self, other):
        if not isinstance(other, Lecturer):
            return NotImplemented
        return self.average_grade() > other.average_grade()

    def __ge__(self, other):
        if not isinstance(other, Lecturer):
            return NotImplemented
        return self.average_grade() >= other.average_grade()


class Reviewer(Mentor):

    def __init__(self, name, surname):
        super().__init__(name, surname)

    def rate_hw(self, student, course, grade):
        if course in self.courses_attached and course in student.courses_in_progress:
            if course in student.grades:
                student.grades[course].append(grade)
            else:
                student.grades[course] = [grade]
        else:
            return 'Ошибка'

    def __str__(self):
        return (f"Имя: {self.name}\n"
                f"Фамилия: {self.surname}")



def average_student_grade_by_course(students, course):
    all_grades = []
    for student in students:
        if course in student.grades:
            all_grades.extend(student.grades[course])
    return sum(all_grades) / len(all_grades) if all_grades else 0


def average_lecturer_grade_by_course(lecturers, course):
    all_grades = []
    for lecturer in lecturers:
        if course in lecturer.grades:
            all_grades.extend(lecturer.grades[course])
    return sum(all_grades) / len(all_grades) if all_grades else 0


def main():
    reviewer = Reviewer('Сидор', 'Сидоров')
    lecturer1 = Lecturer('Иван', 'Иванов')
    lecturer2 = Lecturer('Анна', 'Петрова')
    student1 = Student('Ольга', 'Алёхина', 'Ж')
    student2 = Student('Иван', 'Иванов', 'М')

    reviewer.courses_attached += ['Python', 'Git']
    lecturer1.courses_attached += ['Python', 'Git']
    lecturer2.courses_attached += ['Python', 'Java']

    student1.courses_in_progress += ['Python', 'Git']
    student1.finished_courses += ['Введение в программирование']
    student2.courses_in_progress += ['Python', 'Java']

    reviewer.rate_hw(student1, 'Python', 9)
    reviewer.rate_hw(student1, 'Python', 10)
    reviewer.rate_hw(student2, 'Python', 8)
    reviewer.rate_hw(student2, 'Python', 10)

    student1.rate_lecture(lecturer1, 'Python', 10)
    student1.rate_lecture(lecturer1, 'Python', 9)
    student2.rate_lecture(lecturer2, 'Python', 8)
    student2.rate_lecture(lecturer2, 'Python', 8)

    print(reviewer)
    print("=" * 50)
    print(lecturer1)
    print("=" * 50)
    print(student1)
    print("=" * 50)

    print(f"lecturer1 > lecturer2: {lecturer1 > lecturer2}")
    print(f"student1 == student2: {student1 == student2}")

    students_list = [student1, student2]
    lecturers_list = [lecturer1, lecturer2]

    avg_student_python = average_student_grade_by_course(students_list, 'Python')
    avg_lecturer_python = average_lecturer_grade_by_course(lecturers_list, 'Python')

    print(f"Средняя оценка студентов (Python): {avg_student_python:.1f}")
    print(f"Средняя оценка лекторов (Python): {avg_lecturer_python:.1f}")


if __name__ == "__main__":
    main()
